//go:build ignore
// +build ignore

package main

import (
	"bufio"
	"fmt"
	"os"
	"path/filepath"
	"strings"
)

func main() {
	if len(os.Args) < 2 {
		fmt.Fprintln(os.Stderr, "Usage: go run generate.go <chars-file>")
		os.Exit(1)
	}

	inputFile := os.Args[1]
	base := strings.TrimSuffix(filepath.Base(inputFile), filepath.Ext(inputFile))
	outputFile := "homo" + base + ".go"

	in, err := os.Open(inputFile)
	if err != nil {
		panic(err)
	}
	defer in.Close()

	out, err := os.Create(outputFile)
	if err != nil {
		panic(err)
	}
	defer out.Close()

	fmt.Fprintln(out, "package main")
	fmt.Fprintln(out, "// Code generated by generate.go; DO NOT EDIT.")
	fmt.Fprintln(out, "var homoglyphMap = map[rune][]rune{")

	scanner := bufio.NewScanner(in)
	for scanner.Scan() {
		line := strings.TrimSpace(scanner.Text())
		if line == "" || strings.HasPrefix(line, "#") {
			continue
		}

		runes := []rune(line)
		for _, r := range runes {
			fmt.Fprintf(out, "\t%q: {", r)
			for _, alt := range runes {
				if alt != r {
					fmt.Fprintf(out, "%q,", alt)
				}
			}
			fmt.Fprintln(out, "},")
		}
	}

	fmt.Fprintln(out, "}")
}
